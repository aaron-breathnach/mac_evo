[qc]
hostile = hostile clean --fastq1 reads/raw/{prefix}_R1_001.fastq.gz --fastq2 reads/raw/{prefix}_R2_001.fastq.gz --out-dir reads/hostile --threads {threads}
fastp = docker run -v $PWD:/data staphb/fastp fastp -i reads/hostile/{prefix}_R1_001.clean_1.fastq.gz -I reads/hostile/{prefix}_R2_001.clean_2.fastq.gz -o reads/processed/{prefix}_R1_001.qcd.fastq.gz -O reads/processed/{prefix}_R2_001.qcd.fastq.gz -j reads/fastp/{prefix}.json -h reads/fastp/{prefix}.html
kraken = docker run -v $PWD:/data staphb/kraken2 kraken2 --db databases/kraken/k2_standard_08gb --threads {threads} --output kraken/{prefix}.output --report kraken/{prefix}.report --paired reads/processed/{prefix}_R1_001.qcd.fastq.gz reads/processed/{prefix}_R2_001.qcd.fastq.gz --gzip-compressed
bracken = docker run -v $PWD:/data staphb/bracken bracken -d databases/kraken/k2_standard_08gb -i kraken/{prefix}.report -o kraken/{prefix}.bracken -l G

[assembly_and_annotation]
spades = docker run -v $PWD:/data staphb/spades spades.py -1 reads/processed/{prefix}_R1_001.qcd.fastq.gz -2 reads/processed/{prefix}_R2_001.qcd.fastq.gz -o spades/{prefix} --isolate -t {threads} -m {ram}
prokka = docker run -v $PWD:/data staphb/prokka:latest prokka spades/{prefix}/contigs.fasta --outdir prokka/{prefix} --prefix {prefix} --genus Mycobacterium --usegenus --cpus {threads} --force --centre X --compliant

[population_analysis]
ska_build = ska build -f {out_dir}/file_list.txt -k 31 -o {out_dir}/index --threads {threads} -v
ska_align = ska align --min-freq 1 --filter no-filter {out_dir}/index.skf -o {out_dir}/alignment.aln --ambig-mask --threads {threads} -v
ska_map = ska map -o {out_dir}/alignment.aln --ambig-mask --threads {threads} {ref} {out_dir}/index.skf
fastbaps = Rscript src/run_fastbaps.R
run_gubbins = run_gubbins.py --prefix {out_dir}/gubbins {out_dir}/alignment.aln --threads {threads}
snp_dists = docker run -v $PWD:/data staphb/snp-dists snp-dists {out_dir}/gubbins.filtered_polymorphic_sites.fasta > {out_dir}/snp_dists.txt

[muttui]
muttui = MutTui korimuto -v muttui/vcfs/{query}.lofreq.tidy.vcf -r muttui/fnas/{reference}.tidy.fna -o muttui/output/{query} --multi_contig

[variant_calling]
bwa_index = bwa index {index}
bwa_mem = bwa mem -x intractg -t {threads} {index} reads/processed/{prefix}_R1_001.qcd.fastq.gz reads/processed/{prefix}_R2_001.qcd.fastq.gz | samtools fixmate - - | samtools view -bq 1 | samtools sort -m 4g -o {out_dir}/{prefix}.bwa.bam -T {out_dir}/{prefix}.bwa.bam.tmp -
samtools_index_1 = samtools index {out_dir}/{prefix}.bwa.bam
lofreq_part_1 = lofreq viterbi -f {index} {out_dir}/{prefix}.bwa.bam | lofreq indelqual --dindel -f {index} - | samtools sort -m 4g -o {out_dir}/{prefix}.lofreq.bam -T {out_dir}/{prefix}.lofreq.bam.tmp -
samtools_index_2 = samtools index {out_dir}/{prefix}.lofreq.bam
lofreq_part_2 = lofreq call-parallel --sig 1E-4 --min-cov 25 --min-bq 25 --min-alt-bq 25 --min-mq 60 -d 10000 {bed} --pp-threads {threads} -f {index} -o {out_dir}/{prefix}.lofreq.vcf {out_dir}/{prefix}.lofreq.bam
bgzip = bgzip {out_dir}/{prefix}.lofreq.vcf
tabix = tabix {out_dir}/{prefix}.lofreq.vcf.gz
rm = rm {out_dir}/*bam*

[snpeff]
snpeff_build = java -jar {}/snpEff/snpEff.jar build -genbank -v {}
fix_vcf = zcat < {x}.gz | gsed 's/gnl|X|//g' > {x} && rm {x}.gz
snpeff_main = java -jar {}/snpEff/snpEff.jar {} {} > {}

[panaroo]
panaroo = panaroo -i panaroo/input/*.gff -o panaroo/output -t {threads} --clean-mode sensitive
panaroo_generate_gffs = panaroo-generate-gffs -i panaroo/input/*.gff -o panaroo/output
panaroo_filter_pa = panaroo-filter-pa  -i panaroo/output/gene_presence_absence.csv  -o ./ --type pseudo,length
parse = python src/parse_panaroo_output.py
